"""Main App Generator - Generates main FastAPI application"""

from ...generators.base_generator import BaseGenerator


class MainAppGenerator(BaseGenerator):
    """Generates the main FastAPI application"""

    def generate(self):
        """Generate main.py file"""
        content = self._get_main_app_template()
        self.write_file(f"{self.config.path}/app/main.py", content)

    def _get_main_app_template(self) -> str:
        """Get the main app template"""
        template = f'''"""
{self.config.name.replace("-", "_").title()} FastAPI Application
Generated by FastStarter
"""

from fastapi import FastAPI{self._get_middleware_imports()}
from fastapi.middleware.cors import CORSMiddleware
{self._get_database_imports()}
{self._get_auth_imports()}
from app.api.v1 import router as api_router
from app.core.config import settings
{self._get_monitoring_imports()}

# Create FastAPI instance
app = FastAPI(
    title=settings.APP_NAME,
    description="A FastAPI application generated by FastStarter",
    version="1.0.0",
    openapi_url=settings.API_PREFIX + "/openapi.json" if settings.DEBUG else None,
    docs_url="/docs" if settings.DEBUG else None,
    redoc_url="/redoc" if settings.DEBUG else None,
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.ALLOWED_ORIGINS,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

{self._get_middleware_setup()}

{self._get_database_setup()}

{self._get_monitoring_setup()}

# Include routers
app.include_router(api_router, prefix=settings.API_PREFIX)

{self._get_startup_events()}

{self._get_shutdown_events()}

@app.get("/")
async def root():
    """Root endpoint"""
    return {{"message": "Welcome to {self.config.name}!", "version": "1.0.0"}}

@app.get("/health")
async def health_check():
    """Health check endpoint"""
    return {{"status": "healthy", "service": "{self.config.name}"}}
'''
        return template

    def _get_middleware_imports(self) -> str:
        """Get middleware imports"""
        imports = []
        if self.config.include_monitoring:
            imports.append(", Depends")
        return "".join(imports)

    def _get_database_imports(self) -> str:
        """Get database imports"""
        from ...core.config import DatabaseType

        if self.config.database_type in [
            DatabaseType.SQLITE,
            DatabaseType.POSTGRESQL,
            DatabaseType.MYSQL,
        ]:
            return "from app.db.database import engine"
        elif self.config.database_type == DatabaseType.MONGODB:
            return "from app.db.database import init_db"
        return ""

    def _get_auth_imports(self) -> str:
        """Get auth imports"""
        from ...core.config import AuthType

        if self.config.auth_type != AuthType.NONE:
            return "from app.core.security import get_current_user"
        return ""

    def _get_monitoring_imports(self) -> str:
        """Get monitoring imports"""
        if self.config.include_monitoring:
            return """
from prometheus_client import make_asgi_app
import structlog"""
        return ""

    def _get_middleware_setup(self) -> str:
        """Get middleware setup"""
        setup = []

        if self.config.include_monitoring:
            setup.append(
                """
# Prometheus metrics
metrics_app = make_asgi_app()
app.mount("/metrics", metrics_app)"""
            )

        return "\n".join(setup)

    def _get_database_setup(self) -> str:
        """Get database setup"""
        from ...core.config import DatabaseType

        if self.config.database_type == DatabaseType.MONGODB:
            return """
# MongoDB setup
@app.on_event("startup")
async def startup_db_client():
    await init_db()"""
        return ""

    def _get_monitoring_setup(self) -> str:
        """Get monitoring setup"""
        if self.config.include_monitoring:
            return """
# Structured logging setup
structlog.configure(
    processors=[
        structlog.stdlib.filter_by_level,
        structlog.stdlib.add_logger_name,
        structlog.stdlib.add_log_level,
        structlog.stdlib.PositionalArgumentsFormatter(),
        structlog.processors.TimeStamper(fmt="iso"),
        structlog.processors.StackInfoRenderer(),
        structlog.processors.format_exc_info,
        structlog.processors.UnicodeDecoder(),
        structlog.processors.JSONRenderer()
    ],
    context_class=dict,
    logger_factory=structlog.stdlib.LoggerFactory(),
    wrapper_class=structlog.stdlib.BoundLogger,
    cache_logger_on_first_use=True,
)"""
        return ""

    def _get_startup_events(self) -> str:
        """Get startup events"""
        events = []

        if self.config.include_celery:
            events.append(
                """
@app.on_event("startup")
async def startup_celery():
    # Initialize Celery if needed
    pass"""
            )

        return "\n".join(events)

    def _get_shutdown_events(self) -> str:
        """Get shutdown events"""
        events = []

        if self.config.include_celery:
            events.append(
                """
@app.on_event("shutdown")
async def shutdown_celery():
    # Cleanup Celery if needed
    pass"""
            )

        return "\n".join(events)

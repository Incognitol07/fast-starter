"""
Template Manager
Manages all template content for project generation
"""

from typing import Dict, Any
from .config import ProjectConfig, DatabaseType, AuthType, ProjectType


class TemplateManager:
    """Manages all template content and provides formatted templates"""

    def __init__(self, config: ProjectConfig):
        self.config = config

    def get_template_vars(self) -> Dict[str, Any]:
        """Get template variables"""
        return {
            "project_name": self.config.name,
            "project_name_snake": self.config.name.lower().replace("-", "_"),
            "project_name_pascal": "".join(
                word.capitalize()
                for word in self.config.name.replace("-", "_").split("_")
            ),
            "is_async": self.config.is_async,
            "is_advanced": self.config.is_advanced,
            "database_type": self.config.database_type.value,
            "auth_type": self.config.auth_type.value,
            "python_version": self.config.python_version,
            "include_docker": self.config.include_docker,
            "include_tests": self.config.include_tests,
            "include_docs": self.config.include_docs,
            "include_monitoring": self.config.include_monitoring,
            "include_celery": self.config.include_celery,
        }

    def format_template(self, template: str) -> str:
        """Format template with variables"""
        return template.format(**self.get_template_vars())

    def get_readme_template(self) -> str:
        """Get README template"""
        template = """# {project_name}

A FastAPI project generated by FastStarter.

## Features

- **FastAPI**: Modern, fast web framework for building APIs
- **Database**: {database_type}
- **Authentication**: {auth_type}
- **Async Support**: {{"Yes" if {is_async} else "No"}}
- **Docker Support**:{{"Yes" if {include_docker} else "No"}}
- **Testing**: {{"Yes" if {include_tests} else "No"}}
- **Documentation**: {{"Yes" if {include_docs} else "No"}}
- **Monitoring**: {{"Yes" if {include_monitoring} else "No"}}
- **Background Tasks**: {{"Yes" if {include_celery} else "No"}}

## Quick Start

### Local Development

1. Install dependencies:
```bash
pip install -r requirements.txt
```

2. Copy environment variables:
```bash
cp .env.template .env
```

3. Run the application:
```bash
uvicorn app.main:app --reload
```

The API will be available at: http://localhost:8000

### API Documentation

- **Swagger UI**: http://localhost:8000/docs
- **ReDoc**: http://localhost:8000/redoc

### Docker

Build and run with Docker:

```bash
docker build -t {project_name} .
docker run -p 8000:8000 {project_name}
```

### Testing

Run tests:

```bash
pytest
```

## Project Structure

```
{project_name}/
├── app/
│   ├── api/
│   │   └── v1/
│   │       ├── __init__.py
│   │       └── endpoints.py
│   ├── core/
│   │   ├── __init__.py
│   │   ├── config.py
│   │   └── security.py
│   ├── db/
│   │   ├── __init__.py
│   │   └── database.py
│   ├── models/
│   │   └── __init__.py
│   ├── schemas/
│   │   └── __init__.py
│   ├── services/
│   │   └── __init__.py
│   ├── utils/
│   │   └── __init__.py
│   ├── __init__.py
│   └── main.py
├── tests/
├── requirements.txt
├── Dockerfile
├── .env.template
├── .gitignore
└── README.md
```

## Development

### Adding New Endpoints

1. Create new endpoint functions in `app/api/v1/endpoints.py`
2. Add corresponding schemas in `app/schemas/`
3. Implement business logic in `app/services/`
4. Add tests in `tests/`

### Environment Variables

See `.env.template` for all available configuration options.

## License

This project is licensed under the MIT License.
"""
        return self.format_template(template)

    def get_gitignore_template(self) -> str:
        """Get .gitignore template"""
        return """# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
pip-wheel-metadata/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
.python-version

# pipenv
Pipfile.lock

# PEP 582
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# IDE
.vscode/
.idea/
*.swp
*.swo
*~

# OS
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Project specific
uploads/
logs/
*.db
*.sqlite
*.sqlite3
"""

    def get_env_template(self) -> str:
        """Get environment template"""
        template = """# Application Configuration
APP_NAME={project_name}
APP_VERSION=1.0.0
DEBUG=True
API_PREFIX=/api/v1

# Server Configuration
HOST=0.0.0.0
PORT=8000

# Database Configuration
DATABASE_URL=sqlite:///./app.db

# Security Configuration
SECRET_KEY=your-secret-key-here
ACCESS_TOKEN_EXPIRE_MINUTES=30
ALGORITHM=HS256

# CORS Configuration
ALLOWED_ORIGINS=["http://localhost:3000", "http://localhost:8080"]

# Logging Configuration
LOG_LEVEL=INFO
LOG_FILE=app.log

# External Services
# Add your external service configurations here
"""
        return self.format_template(template)

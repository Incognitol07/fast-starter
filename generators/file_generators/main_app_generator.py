"""
Main App Generator
Generates the main FastAPI application file
"""

from ..base_generator import BaseGenerator
from ..config import AuthType, DatabaseType


class MainAppGenerator(BaseGenerator):
    """Generates the main FastAPI application"""

    def generate(self):
        """Generate main.py file"""
        content = self._get_main_app_template()
        self.write_file(f"{self.config.path}/app/main.py", content)

    def _get_main_app_template(self) -> str:
        """Get the main app template"""
        template = '''"""
{project_name_pascal} FastAPI Application
Generated by FastStarter
"""

from fastapi import FastAPI{middleware_imports}
from fastapi.middleware.cors import CORSMiddleware
{database_imports}
{auth_imports}
from app.api.v1 import endpoints
from app.core.config import settings
{monitoring_imports}

# Create FastAPI instance
app = FastAPI(
    title=settings.APP_NAME,
    description="A FastAPI application generated by FastStarter",
    version="1.0.0",
    openapi_url=settings.API_PREFIX + "/openapi.json" if settings.DEBUG else None,
    docs_url="/docs" if settings.DEBUG else None,
    redoc_url="/redoc" if settings.DEBUG else None,
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.ALLOWED_ORIGINS,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

{middleware_setup}

# Database setup
{database_setup}

# Include routers
app.include_router(endpoints.router, prefix=settings.API_PREFIX)

{startup_events}

{health_check}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "app.main:app",
        host=settings.HOST,
        port=settings.PORT,
        reload=settings.DEBUG,
        log_level=settings.LOG_LEVEL.lower(),
    )
'''

        return self.format_template(self._customize_template(template))

    def _customize_template(self, template: str) -> str:
        """Customize template based on configuration"""
        middleware_imports = ""
        middleware_setup = ""
        database_imports = ""
        database_setup = ""
        auth_imports = ""
        monitoring_imports = ""
        startup_events = ""
        project_name_pascal = ""


        # Database imports and setup
        if self.config.database_type in [
            DatabaseType.SQLITE,
            DatabaseType.POSTGRESQL,
            DatabaseType.MYSQL,
        ]:
            database_imports = "from app.db.database import engine, Base"
            if self.config.is_async:
                startup_events += '''
@app.on_event("startup")
async def startup_event():
    """Initialize database on startup"""
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)
'''
            else:
                startup_events += '''
@app.on_event("startup")
def startup_event():
    """Initialize database on startup"""
    Base.metadata.create_all(bind=engine)
'''

        # Authentication imports
        if self.config.auth_type != AuthType.NONE:
            auth_imports = "from app.core.security import get_current_user"

        # Monitoring setup
        if self.config.include_monitoring:
            monitoring_imports = """
from prometheus_client import make_asgi_app
import structlog"""
            middleware_setup += """
# Prometheus metrics
metrics_app = make_asgi_app()
app.mount("/metrics", metrics_app)

# Structured logging
structlog.configure(
    processors=[
        structlog.stdlib.filter_by_level,
        structlog.stdlib.add_logger_name,
        structlog.stdlib.add_log_level,
        structlog.stdlib.PositionalArgumentsFormatter(),
        structlog.processors.TimeStamper(fmt="iso"),
        structlog.processors.StackInfoRenderer(),
        structlog.processors.format_exc_info,
        structlog.processors.UnicodeDecoder(),
        structlog.processors.JSONRenderer()
    ],
    context_class=dict,
    logger_factory=structlog.stdlib.LoggerFactory(),
    wrapper_class=structlog.stdlib.BoundLogger,
    cache_logger_on_first_use=True,
)
"""

        # Health check endpoint
        health_check = '''
@app.get("/health")
async def health_check():
    """Health check endpoint"""
    return {{"status": "healthy", "service": "{project_name}"}}
'''

        return template.format(
            project_name_pascal=project_name_pascal,
            middleware_imports=middleware_imports,
            middleware_setup=middleware_setup,
            database_imports=database_imports,
            database_setup=database_setup,
            auth_imports=auth_imports,
            monitoring_imports=monitoring_imports,
            startup_events=startup_events,
            health_check=health_check,
        )
